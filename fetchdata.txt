/**  STILL IN PROGRESS - Posting for reference
 some additions to the dependencies are needed in 
  package.json and app.json
 see these in the link: https://blog.logrocket.com/build-object-classification-app-tensorflow-react-native/
*/

import { View, Text, Image, Button, StyleSheet, SafeAreaView } from 'react-native';
import { decodeJpeg,  } from '@tensorflow/tfjs-react-native';
import * as mobilenet from '@tensorflow-models/mobilenet';
import React, { useEffect, useState } from 'react';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';
import * as tf from '@tensorflow/tfjs';


const App = () => {
  const [isTfReady, setIsTfReady] = useState(false);
  const [pickedImage, setPickedImage] = useState('');  // uses URI
  const [imageNoURI, setimageNoURI] = useState('');
  const [result, setResult] = useState('');
  const [model, setModel] = useState(null); // Define the model variable


  /** MobileNet Model*/
  // Load the MobileNet model when the component is mounted
  useEffect(() => {
    async function loadModel() {
      try {
        // Load MobileNet
        await tf.ready();
        const mobilenetModel = await mobilenet.load();
        setModel(mobilenetModel); // Set the model in state
        setIsTfReady(true);
      } catch (err) {
        console.log("Load Model Error: " + err);
      }
    }
    loadModel();
  }, []);


  // select an image from photo gallery and set it
  const pickImage = async () => {
    const image = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });
    if (!image.canceled) {
      setPickedImage(image.assets[0].uri);
      setimageNoURI(image.assets[0]);
      /** 
      console.log(pickedImage);
      const formData = new FormData();
      formData.append('file', {
        uri: image.assets[0].uri,
        type: image.assets[0].type,
        name: image.assets[0].fileName
      })
      let serverResponse = await fetch(
        'http://54.215.250.216:5000/uploadV2', {
          method: 'post',
          body: formData,
          headers: {
            'Content-Type': 'multipart/form-data',
          }
        }
      );
      if (!serverResponse.ok) {
        console.error('Failed to send data to the server. Status:', serverResponse.status);
        const errorResponse = await serverResponse.text();
        console.error('Error response:', errorResponse);
      } else {
        let responseJson = await serverResponse.json();
        console.log(responseJson, 'responseJson');
      }*/
    }
  };

  const classifyUsingMobilenet = async () => {
    try {
      if (model && pickedImage) { // Check if the model is loaded
        // Convert image to tensor
        const imgB64 = await FileSystem.readAsStringAsync(pickedImage, {
          encoding: FileSystem.EncodingType.Base64,
        });
        const imgBuffer = tf.util.encodeString(imgB64, 'base64').buffer;
        const raw = new Uint8Array(imgBuffer)
        const imageTensor = decodeJpeg(raw);

        // Classify the tensor and show the result
        const prediction = await model.classify(imageTensor);
        if (prediction && prediction.length > 0) {
          // Get the top 3 predictions
          const top3Predictions = prediction.slice(0, 3);
          setResult(top3Predictions);
          console.log('Top 3 predictions by Mobilenet: ', top3Predictions, '\n');

          //const topPrediction = top3Predictions[0];
          // automatically send to server when you get your predictions without having to use buttons
          //sendDataToServer(topPrediction);
          //sendDataToServer(top3Predictions);
        }
      }
    } catch (err) {
      console.log("classifyUsingMobilenet: " + err);
    }      
  };

/** send data to server onPress */
  const sendDataToServer = async () => {
    try {
      if (pickedImage && result.length > 0) {
 
        // Get the top prediction
        const topPred = result[0];
 
        // Create a FormData object
        const formData = new FormData();
        formData.append('file', {
          uri: pickedImage,
          type: imageNoURI.type,
          name: imageNoURI.name,
        });
        formData.append('className', topPred.className);
        formData.append('confidence', topPred.probability.toFixed(3));
 
        // Use fetch to send data to the server
        const response = await fetch('http://54.215.250.216:5000/uploadV2', {
          method: 'post',
          body: formData,
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
 
        // Check if the request was successful
        if (response.ok) {
          const responseData = await response.json();
          console.log('Response from the server:', responseData);
        } else {
          console.error('Failed to send data to the server. Status:', response.status);
        }
      } else {
        console.log('Please select an image and classify it first.');
      }
    } catch (error) {
      console.error('SendingDataToServer:', error);
    }
  };
 


  /** for mobilenet */
  useEffect(() => {
    classifyUsingMobilenet();
  }, [pickedImage, model]);

  
 /** Necessary to avoid memory leakage. 
  * If it gives you an error saying 
  * .dispose() is not a function, 
  * comment, save, then uncomment.
*/
  useEffect(() => {
    // Cleanup function
    return () => {
      tf.disposeVariables(); // Clean up tensors
      if (model) {
        model.dispose(); // Dispose of the loaded model
      }
    };
  }, [model]);  

  return (
    <SafeAreaView style={styles.container}>
      {pickedImage ? (
        <Image source={{ uri: pickedImage }} style={styles.imagePreview} />
      ) : (
        <Text>No image selected</Text>
      )}

      {isTfReady && (
        <View style={styles.buttonContainer}>
          <Button title="Pick an image" onPress={pickImage} />
          <Button title="Send Data to Server" onPress={sendDataToServer} />          
        </View>
      )}

      <View style={{ width: '100%', height: 20 }} />
      {!isTfReady && <Text>Loading TFJS model...</Text>}
      {isTfReady && result.length === 0 && <Text>Pick an image to classify!</Text>}
      
      {result.length > 0 && (
        <View>
          <Text>Top 3 Predictions:</Text>
          {result.map((prediction, index) => (
            <Text key={index}>
              {`${prediction.className} (${prediction.probability.toFixed(3)})`}
            </Text>
          ))}
        </View>
      )}
    </SafeAreaView>
  );
};

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      height: '100%',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
    },
    imagePreview: {
      width: 350,
      height: 300,
      margin: 40,
      marginVertical: 8,
      justifyContent: "center",
      alignItems: "center",
      backgroundColor: "#6699ff",
      borderRadius: 4,
    },
    image: {
      width: "100%",
      height: "100%",
    },
    buttonContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      width: '100%',
      paddingHorizontal: 50,
      marginTop: 16,
    }
  });

export default App;
